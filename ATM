#include<stdio.h>
#include<string.h>
#include<stdlib.h>
  
struct Account           //定义结构体
{
	char name[20];
	char ID[20];
	int money;
	char password[6];
	struct Account * next;
};
typedef struct Account Account;
typedef struct person    //定义另一结构体
{
	struct Account kehu;
	struct person *next;
}L;
typedef struct person person;
  
void chaxun1(Account *head);    //中文各个函数的声明
void kaihu1(Account *head);
void loading1(Account *head);
void caidan1(Account *head);
void qukuan1(Account *head);
void xgmm1(Account *head);
void cunkuan1(Account *head);
void zhuanzhang1(Account *head);
void chuangjian1(person **Phead);
void shuchu1(person *Phead);
void shanchu1(person **Phead);
void zengjia1(person **Phead);
void chaxun11(person *Phead);
void chaxun21(person *Phead);
void chaxun31(person *Phead);
void tuichu1();
void menu1();
int  language(int l);
void chaxun2(Account *head);    //英文各个函数的声明
void kaihu2(Account *head);
void loading2(Account *head);
void caidan2(Account *head);
void qukuan2(Account *head);
void xgmm2(Account *head);
void cunkuan2(Account *head);
void zhuanzhang2(Account *head);
void chuangjian2(person **Phead);
void shuchu2(person *Phead);
void shanchu2(person **Phead);
void zengjia2(person **Phead);
void chaxun12(person *Phead);
void chaxun22(person *Phead);
void chaxun32(person *Phead);
void tuichu2();
void menu2();

int main()     /*主函数*/
{
	int l;
	if(language(l)==1)//中文系统
	{
		char x1;
		char choose1; //choose为定义输入选择的变量
		int flag1=1;
		person *Phead=NULL; //Phead为定义二层头指针
		Account *head=NULL;    //head为定义一层头指针
		printf("*****************************\n");
		printf("**欢迎使用ATM自动取款机系统**\n");
		printf("*****************************\n");
		printf("——————————————\n");
		printf("|    1  开户                |\n");
		printf("——————————————\n");
		printf("|    2  登陆                |\n");
		printf("——————————————\n");
		printf("|    3  前台客户信息查询中心|\n");
		printf("——————————————\n");
		printf("|    4  请选择您的需求      |\n");
		printf("——————————————\n");
		scanf("%s",&x1);
		system("cls");
		switch(x1)
		{
		case '1':system("cls");
			kaihu1(head);   //调用开户函数
			break;
		case '2':system("cls");  
			loading1(head);   //调用登陆函数
			break;  
		case '3':system("cls");
			menu1();   //调用后台菜单函数
			break;
		}
		while(flag1)
		{
			
			system("cls");
			menu1();       //调用后台菜单函数
			choose1=getchar();
			switch(choose1)
			{
			case '1':chuangjian1(&Phead);
				shuchu1(Phead); //调用后台输出函数
				system("pause");
				system("cls");
				break;
			case '2':chaxun11(Phead); //调用后台卡号查询函数
				system("pause");     
				system("cls");
				break;   
			case '3':  
				chaxun31(Phead); //调用后台余额查询函数
				system("pause");
				system("cls");
				break;
			case '4':shanchu1(&Phead); //调用后台删除用户函数
				system("pause");
				system("cls");
				break;
			case '5':
				zengjia1(&Phead); //调用后台增加用户函数
				system("pause");
				system("cls");
				break;
			case '6':shuchu1(Phead); //调用后台输出函数函数
				system("pause"); 
				system("cls");
				break;
			case '7':shuchu1(Phead); 
				system("pause");
				system("cls");
				break;
			case '0':flag1=0;
				printf("The end.\n");
				break;  
			}
		}
	}
	if(language(l)==2)//英文系统
	{
		char x2;
		char choose2; //choose为定义输入选择的变量
		int flag2=1;
		person *Phead=NULL; //Phead为定义二层头指针
		Account *head=NULL;    //head为定义一层头指针
		printf("*****************************\n");
		printf("**Welcome to the ATM system**\n");
		printf("*****************************\n");
		printf("————————————————————————————\n");
		printf("|    1  Open an account                                 |\n");
		printf("————————————————————————————\n");
		printf("|    2  Loading                                         |\n");
		printf("————————————————————————————\n");
		printf("|    3  Front desk customer information inquiry center  |\n");
		printf("————————————————————————————\n");
		printf("|    4  Please select your requirements                 |\n");
		printf("————————————————————————————\n");
		scanf("%s",&x2);
		system("cls");
		switch(x2)
		{
		case '1':system("cls");
			kaihu2(head);   //调用开户函数
			break;
		case '2':system("cls");  
			loading2(head);   //调用登陆函数
			break;  
		case '3':system("cls");
			menu2();   //调用后台菜单函数
			break;
		}
		while(flag2)
		{
			
			system("cls");
			menu2();       //调用后台菜单函数
			choose2=getchar();
			switch(choose2)
			{
			case '1':chuangjian2(&Phead);
				shuchu2(Phead); //调用后台输出函数
				system("pause");
				system("cls");
				break;
			case '2':chaxun12(Phead); //调用后台卡号查询函数
				system("pause");     
				system("cls");
				break;   
			case '3':  
				chaxun32(Phead); //调用后台余额查询函数
				system("pause");
				system("cls");
				break;
			case '4':shanchu2(&Phead); //调用后台删除用户函数
				system("pause");
				system("cls");
				break;
			case '5':
				zengjia2(&Phead); //调用后台增加用户函数
				system("pause");
				system("cls");
				break;
			case '6':shuchu2(Phead); //调用后台输出函数函数
				system("pause"); 
				system("cls");
				break;
			case '7':shuchu2(Phead); 
				system("pause");
				system("cls");
				break;
			case '0':flag2=0;
				printf("The end.\n");
				break;  
			}
		}
	}
	return 0；
}

int language(int l)
{
	printf("Please select Both Chinese and English services\n");
	printf("请选择中英文服务\n\n");
	printf("Press 1 for Chinese and 2 for English\n");
	printf("中文按1，英文按2\n\n");
	scanf("%d",&l);
	if(l==1)
		return l;
	else
		return l;
}
  
void kaihu1(Account *head)     /*开户函数*/
{
	head=NULL;
	FILE *fp;   //定义文件指针
	Account *p1=NULL,*p2=NULL;   //p1,p2为定义链表指针
    p1=(Account*)malloc(sizeof(Account));  //开辟内存单元
    printf("请输入您的姓名：\n");  //请数据输入链表中
    scanf("%s",p1->name);
    printf("请设置您的卡号：\n");
    scanf("%s",p1->ID);
    printf("请设置您银行卡密码：\n");
    scanf("%s",p1->password);
    p1->money=0;
    p1->next=NULL;
    printf("您的个人信息为");
	printf("姓名：%s \n卡号：%s \n余额：%4d\n",p1->name,p1->ID,p1->money);
    if(NULL==head)           //为新用户开辟内存单元
    {
		head=(Account *)malloc(sizeof(Account));
        head->next=p1;    //进行头插法，将其作为第一个节点
    }
    else    //为新增客户开辟内存单元
    {
		for(p2=head;p2->next!=NULL;p2=p2->next); //进行尾插
        p2->next=p1;
    }
    if((fp=fopen("save.txt","ab+"))==NULL) //打开文件
    {
		printf("cannot poen file\n");
        return;
    }
    if(fwrite(p1,sizeof(Account),1,fp)!=1)  //将链表信息写入文件中
		printf("file write error\n");    
	fclose(fp);
	printf("\n");
    printf("恭喜您开户成功，请登录\n");
    system("pause");
    system("cls");
    loading1(head);
} 

void kaihu2(Account *head)     /*开户函数*/
{
	head=NULL;
	FILE *fp;   //定义文件指针
	Account *p1=NULL,*p2=NULL;   //p1,p2为定义链表指针
    p1=(Account*)malloc(sizeof(Account));  //开辟内存单元
    printf("Please enter your name:\n");  //请数据输入链表中
    scanf("%s",p1->name);
    printf("Please set your card number:\n");
    scanf("%s",p1->ID);
    printf("Please set your bank card password:\n");
    scanf("%s",p1->password);
    p1->money=0;
    p1->next=NULL;
    printf("您的个人信息为");
	printf("姓名：%s \n卡号：%s \n余额：%4d\n",p1->name,p1->ID,p1->money);
    if(NULL==head)           //为新用户开辟内存单元
    {
		head=(Account *)malloc(sizeof(Account));
        head->next=p1;    //进行头插法，将其作为第一个节点
    }
    else    //为新增客户开辟内存单元
    {
		for(p2=head;p2->next!=NULL;p2=p2->next); //进行尾插
        p2->next=p1;
    }
    if((fp=fopen("save.txt","ab+"))==NULL) //打开文件
    {
		printf("cannot poen file\n");
        return;
    }
    if(fwrite(p1,sizeof(Account),1,fp)!=1)  //将链表信息写入文件中
		printf("file write error\n");    
	fclose(fp);
	printf("\n");
    printf("Congratulations on your account success, please log in.\n");
    system("pause");
    system("cls");
    loading2(head);
} 

void loading1(Account *head)  //登陆函数
{
	char d[20];
    char password[20];
    int i,j;
    FILE *fp;     //定义文件指针
    Account *p,*q=NULL;
    if((fp=fopen("save.txt","rb+"))==NULL)   //打开一个二进制文件，为读方式
	{
		printf("不能打开文件\n");   //如不能打开，则结束程序
	}
	p=(Account*)malloc(sizeof(Account));   //申请空间
    head=p;
    while(!feof(fp))       //循环读数据直到文件尾结束
	{
		if(1!=fread(p,sizeof(Account),1,fp))
			break;   //如果没读到数据，跳出循环
        p->next=(Account *)malloc(sizeof(Account));  //为下一个结点申请空间
        q=p;  //保存当前节点的指针，作为下一结点的前驱
        p=p->next;  //指针后移，新读入数据链到当前表尾
	}
	q->next=NULL;  //最后一个结点的后继指针为空
    fclose(fp);
    printf("  **********************\n");
    printf("  ***欢迎来都建设银行***\n");
    printf("  **********************\n");
    for(j=1;j<4;j++)      //限制卡号输入的次数的循环
	{
		printf("请输入您的卡号\n");
        scanf("%s",d);
        for(q=head;q!=NULL;q=q->next)   //遍历链表
		{
			if(strcmp(q->ID,d)!=0)  //核对账号
			{
				continue;   //跳出循环
			}
			else
			{
				for(i=1;i<4;i++)   //限制密码输入的次数的循环
				{
					printf("\n\n请输入您的密码\n");
                    scanf("%s",password);
                    if(strcmp(q->password,password)!=0)      //核对密码
					{
						printf("密码不正确。请重新输入密码\n");
                        system("pause");
                        system("cls");
                        continue;    //若密码不对，跳出循环
					}
					else
					{
						system("cls");
						caidan1(head);   //调用菜单函数
					}
				}
				printf("\n\n\n您输入密码三次错误，谢谢光临\n");
                system("pause");
                system("cls");
                exit(0);
			}
		} 
		printf("\n\n\n您输入的卡号有误，请重试\n");
        system("pause");
        system("cls");
	}
	printf("您的卡号三次输入错误，谢谢使用\n");
	exit(0);
}

void loading2(Account *head)  //登陆函数
{
	char d[20];
    char password[20];
    int i,j;
    FILE *fp;     //定义文件指针
    Account *p,*q=NULL;
    if((fp=fopen("save.txt","rb+"))==NULL)   //打开一个二进制文件，为读方式
	{
		printf("不能打开文件\n");   //如不能打开，则结束程序
	}
	p=(Account*)malloc(sizeof(Account));   //申请空间
    head=p;
    while(!feof(fp))       //循环读数据直到文件尾结束
	{
		if(1!=fread(p,sizeof(Account),1,fp))
			break;   //如果没读到数据，跳出循环
        p->next=(Account *)malloc(sizeof(Account));  //为下一个结点申请空间
        q=p;  //保存当前节点的指针，作为下一结点的前驱
        p=p->next;  //指针后移，新读入数据链到当前表尾
	}
	q->next=NULL;  //最后一个结点的后继指针为空
    fclose(fp);
    printf("  **********************\n");
    printf("  ***欢迎来都建设银行***\n");
    printf("  **********************\n");
    for(j=1;j<4;j++)      //限制卡号输入的次数的循环
	{
		printf("请输入您的卡号\n");
        scanf("%s",d);
        for(q=head;q!=NULL;q=q->next)   //遍历链表
		{
			if(strcmp(q->ID,d)!=0)  //核对账号
			{
				continue;   //跳出循环
			}
			else
			{
				for(i=1;i<4;i++)   //限制密码输入的次数的循环
				{
					printf("\n\nPlease you password.\n");
                    scanf("%s",password);
                    if(strcmp(q->password,password)!=0)      //核对密码
					{
						printf("The password is incorrect. Please re-enter your password.\n");
                        system("pause");
                        system("cls");
                        continue;    //若密码不对，跳出循环
					}
					else
					{
						system("cls");
						caidan2(head);   //调用菜单函数
					}
				}
				printf("\n\n\nThank you for coming\n");
                system("pause");
                system("cls");
                exit(0);
			}
		} 
		printf("\n\n\ The card number you entered is incorrect. Please try again.\n");
        system("pause");
        system("cls");
	}
	printf("Your card number has been entered incorrectly for three times. Thank you for using it.\n");
	exit(0);
}

void caidan1(Account *head)    //银行菜单函数
{
	head=NULL;
	int i;      //i为客户选择输入的变量
    while(1)
	{
		printf("请选择您需要的业务\n");      //银行业务菜单
        printf("*********************************\n");
        printf("**  1 取款   *****   2 查询    **\n");
        printf("*********************************\n");
        printf("**  3 转账   *****   4 修改密码**\n");
        printf("*********************************\n");
        printf("**  5 存款   *****   6 退出    **\n");
        printf("*********************************\n");
        scanf("%d",&i);
        if(i<6||i>0)
		{
			switch(i)
			{
			case 1:qukuan1(head);       //调用银行取款函数
				system("pause");
                system("cls");
                break;
			case 2:system("cls");
				chaxun1(head);  //调用银行查询函数
                break;
			case 3:system("cls");
				zhuanzhang1(head);  //调用银行转账函数
                break;
            case 4:system("cls");
				xgmm1(head);  //调用银行修改密码函数
                break;
            case 5:system("cls");
				cunkuan1(head);  //调用银行存款函数
                break;
            case 6:system("cls");
				tuichu1();  //调用银行退出函数
                break;
			}
		}
		else
		{
			printf("您的输入有误\n");
            system("pause");
            system("cls");
		}
	}
}

void caidan2(Account *head)    //银行菜单函数
{
	head=NULL;
	int i;      //i为客户选择输入的变量
    while(1)
	{
		printf("Please select the service you need\n");      //银行业务菜单
        printf("****************************************************\n");
        printf("**  1 withdrawals   *****   2 query               **\n");
        printf("****************************************************\n");
        printf("**  3 transfer      *****   4 Change the password **\n");
        printf("****************************************************\n");
        printf("**  5 deposit       *****   6 exit                **\n");
        printf("****************************************************\n");
        scanf("%d",&i);
        if(i<6||i>0)
		{
			switch(i)
			{
			case 1:qukuan2(head);       //调用银行取款函数
				system("pause");
                system("cls");
                break;
			case 2:system("cls");
				chaxun2(head);  //调用银行查询函数
                break;
			case 3:system("cls");
				zhuanzhang2(head);  //调用银行转账函数
                break;
            case 4:system("cls");
				xgmm2(head);  //调用银行修改密码函数
                break;
            case 5:system("cls");
				cunkuan2(head);  //调用银行存款函数
                break;
            case 6:system("cls");
				tuichu2();  //调用银行退出函数
                break;
			}
		}
		else
		{
			printf("Error.\n");
            system("pause");
            system("cls");
		}
	}
}

void qukuan1(Account *head)   //银行取款函数
{
	head=NULL;   //head为链表头指针
    int i;
    FILE *fp;          //定义文件指针
    Account *p,*q=NULL;
    if((fp=fopen("save.txt","rb+"))==NULL) //打开一个二进制文件，为读方式
	{
		printf("不能打开文件\n");  //如不能打开，则结束程序
	}
	p=(Account*)malloc(sizeof(Account));  //申请空间
    head=p;
    while(!feof(fp))   //循环读数据直到文件尾结束
	{
		if(1!=fread(p,sizeof(Account),1,fp))
			break;   //如果没有读到数据，跳出循环
		p->next=(Account *)malloc(sizeof(Account));  //为下一个结点申请空间
        q=p;   //保存当前结点的指针，作为下一个结点的前驱
        p=p->next;  //指针后移，新读入数据链到当前表尾
	}
	q->next=NULL;  //最后一个结点的后继指针为空
    fclose(fp);
    system("cls");
    printf("请按要求选择您要取款的金额\n");
    scanf("%d",&i);
    if(i<=0)    //限制输入范围
	{
		printf("对不起，您的输入有误\n\n");
		return;
	}
    else
	{
        if(i>q->money)
		{
			printf("对不起，您的金额不足\n");
            system("pause");
            system("cls");
            caidan1(head);   //调用取款机菜单函数
		}
        else
		{
			q->money-=i;  //对金额进行处理
            if((fp=fopen("save.txt","wb+"))==NULL)  //打开文件
			{
				printf("cannot open file\n");
                return;
			}
            if(fwrite(q,sizeof(Account),1,fp)!=1) //将修改的信息重新写入文件
				printf("file write error\n");
            printf("您已经成功取走%d元\n");
            q->next=NULL;
            fclose(fp);    //关闭文件
		} 
	}
}  

void qukuan2(Account *head)   //银行取款函数
{
	head=NULL;   //head为链表头指针
    int i;
    FILE *fp;          //定义文件指针
    Account *p,*q=NULL;
    if((fp=fopen("save.txt","rb+"))==NULL) //打开一个二进制文件，为读方式
	{
		printf("Unable to open file.\n");  //如不能打开，则结束程序
	}
	p=(Account*)malloc(sizeof(Account));  //申请空间
    head=p;
    while(!feof(fp))   //循环读数据直到文件尾结束
	{
		if(1!=fread(p,sizeof(Account),1,fp))
			break;   //如果没有读到数据，跳出循环
		p->next=(Account *)malloc(sizeof(Account));  //为下一个结点申请空间
        q=p;   //保存当前结点的指针，作为下一个结点的前驱
        p=p->next;  //指针后移，新读入数据链到当前表尾
	}
	q->next=NULL;  //最后一个结点的后继指针为空
    fclose(fp);
    system("cls");
    printf("Please select the amount you want to withdraw as required.\n");
    scanf("%d",&i);
    if(i<=0)    //限制输入范围
	{
		printf("Sorry, your input is wrong.\n\n");
		return;
	}
    else
	{
        if(i>q->money)
		{
			printf("Sorry, your amount is not enough.\n");
            system("pause");
            system("cls");
            caidan2(head);   //调用取款机菜单函数
		}
        else
		{
			q->money-=i;  //对金额进行处理
            if((fp=fopen("save.txt","wb+"))==NULL)  //打开文件
			{
				printf("cannot open file\n");
                return;
			}
            if(fwrite(q,sizeof(Account),1,fp)!=1) //将修改的信息重新写入文件
				printf("file write error\n");
            printf("You have successfully withdrawn %d yuan.\n");
            q->next=NULL;
            fclose(fp);    //关闭文件
		} 
	}
}  

void zhuanzhang1(Account *head)//银行转账函数
{
	head=NULL;
	FILE *fp;  //定义文件指针
	Account *p,*q=NULL;
	if((fp=fopen("save.txt","rb+"))==NULL)  //打开一个二进制文件，为读方式
	{
		printf("不能打开文件\n");  //如不能打开，则结束程序
	}
	p=(Account*)malloc(sizeof(Account));   //申请空间
	head=p;
	while(!feof(fp))    //循环读数据直到文件尾结束
	{
		if(1!=fread(p,sizeof(Account),1,fp))
			break;    //如果没读到数据，跳出循环
		p->next=(Account *)malloc(sizeof(Account));  //为下一个结点申请空间
		q=p;   //保存当前结点的指针，作为下一个结点的前驱
		p=p->next;   //指针后移，新读入数据链到当前表尾
	}
	q->next=NULL;   //最后一个结点的后继指针为空
	fclose(fp);
	int i,j,k;
	printf("请输入帐号号码\n");
	scanf("%d",&i);
	printf("请再次输入帐号号码\n");   //核对卡号
	scanf("%d",&j);
	if(i!=j)
	{
		printf("两次账号不同，请重新输入\n");
		zhuanzhang1(head);
	}
	else
	{
		system("cls");
		printf("请输入转账金额\n");
		scanf("%d",&k);
		if(k<=0)
		{
			printf("对不起，您的输入有误\n\n");
			return;
		}
		else
		{
			if(k>q->money)    //对余额进行判断
			{
				printf("对不起，您的余额不足\n");
				system("pause");
				system("cls");
				caidan1(head);
			}
			else
			{
				printf("您已成功转账%d元\n",k);
				q->money-=k;
				if((fp=fopen("save.txt","wb+"))==NULL)
				{
					printf("cannot open file\n");
					return;
				}
				if(fwrite(q,sizeof(Account),1,fp)!=1)  //将数据重新写入文件
					printf("file write error\n");
				q->next=NULL;
				fclose(fp);
				system("pause");
				system("cls");
			}
		}
	}
}  

void zhuanzhang2(Account *head)//银行转账函数
{
	head=NULL;
	FILE *fp;  //定义文件指针
	Account *p,*q=NULL;
	if((fp=fopen("save.txt","rb+"))==NULL)  //打开一个二进制文件，为读方式
	{
		printf("Unable to open file\n");  //如不能打开，则结束程序
	}
	p=(Account*)malloc(sizeof(Account));   //申请空间
	head=p;
	while(!feof(fp))    //循环读数据直到文件尾结束
	{
		if(1!=fread(p,sizeof(Account),1,fp))
			break;    //如果没读到数据，跳出循环
		p->next=(Account *)malloc(sizeof(Account));  //为下一个结点申请空间
		q=p;   //保存当前结点的指针，作为下一个结点的前驱
		p=p->next;   //指针后移，新读入数据链到当前表尾
	}
	q->next=NULL;   //最后一个结点的后继指针为空
	fclose(fp);
	int i,j,k;
	printf("Please enter the account number.\n");
	scanf("%d",&i);
	printf("Please enter the account number again.\n");   //核对卡号
	scanf("%d",&j);
	if(i!=j)
	{
		printf("The two accounts are different, please enter them again.\n");
		zhuanzhang2(head);
	}
	else
	{
		system("cls");
		printf("Please enter the transfer amount\n");
		scanf("%d",&k);
		if(k<=0)
		{
			printf("Sorry, your input is wrong.\n\n");
			return;
		}
		else
		{
			if(k>q->money)    //对余额进行判断
			{
				printf("I'm sorry, your balance is insufficient.\n");
				system("pause");
				system("cls");
				caidan2(head);
			}
			else
			{
				printf("You have successfully transferred %d yuan.\n",k);
				q->money-=k;
				if((fp=fopen("save.txt","wb+"))==NULL)
				{
					printf("cannot open file\n");
					return;
				}
				if(fwrite(q,sizeof(Account),1,fp)!=1)  //将数据重新写入文件
					printf("file write error\n");
				q->next=NULL;
				fclose(fp);
				system("pause");
				system("cls");
			}
		}
	}
}  

//银行查询函数
void chaxun1(Account *head)
{
	head=NULL;  //链表头指针
	FILE *fp;  //定义文件指针
	Account *p,*q=NULL;
	if((fp=fopen("save.txt","rb+"))==NULL)  //打开一个二进制文件，为读方式
	{
		printf("不能打开文件\n");  //如不能打开，则结束程序
	}
	p=(Account*)malloc(sizeof(Account));   //申请空间
	head=p;
	while(!feof(fp))    //循环读数据直到文件尾结束
	{
		if(1!=fread(p,sizeof(Account),1,fp))
			break;    //如果没读到数据，跳出循环
		p->next=(Account *)malloc(sizeof(Account));  //为下一个结点申请空间
		q=p;   //保存当前结点的指针，作为下一个结点的前驱
		p=p->next;   //指针后移，新读入数据链到当前表尾
	}
	q->next=NULL;   //最后一个结点的后继指针为空
	fclose(fp);
	printf("您卡上原有余额%d元\n\n",q->money);
	system("pause");
	system("cls");
}

//银行查询函数
void chaxun2(Account *head)
{
	head=NULL;  //链表头指针
	FILE *fp;  //定义文件指针
	Account *p,*q=NULL;
	if((fp=fopen("save.txt","rb+"))==NULL)  //打开一个二进制文件，为读方式
	{
		printf("Unable to open file.\n");  //如不能打开，则结束程序
	}
	p=(Account*)malloc(sizeof(Account));   //申请空间
	head=p;
	while(!feof(fp))    //循环读数据直到文件尾结束
	{
		if(1!=fread(p,sizeof(Account),1,fp))
			break;    //如果没读到数据，跳出循环
		p->next=(Account *)malloc(sizeof(Account));  //为下一个结点申请空间
		q=p;   //保存当前结点的指针，作为下一个结点的前驱
		p=p->next;   //指针后移，新读入数据链到当前表尾
	}
	q->next=NULL;   //最后一个结点的后继指针为空
	fclose(fp);
	printf("The balance on your card %d yuan.\n\n",q->money);
	system("pause");
	system("cls");
}

//银行修改密码
void xgmm1(Account *head)
{
	head=NULL;          //链表头指针
	char password[20];
	FILE *fp;  //定义文件指针
	Account *p,*q=NULL;
	if((fp=fopen("save.txt","rb+"))==NULL)  //打开一个二进制文件，为读方式
	{
		printf("不能打开文件\n");  //如不能打开，则结束程序
	}
	p=(Account*)malloc(sizeof(Account));   //申请空间
	head=p;
	while(!feof(fp))    //循环读数据直到文件尾结束
	{
		if(1!=fread(p,sizeof(Account),1,fp))
			break;    //如果没读到数据，跳出循环
		p->next=(Account *)malloc(sizeof(Account));  //为下一个结点申请空间
		q=p;   //保存当前结点的指针，作为下一个结点的前驱
		p=p->next;   //指针后移，新读入数据链到当前表尾
	}
	q->next=NULL;   //最后一个结点的后继指针为空
	fclose(fp);
	printf("请输入您的原密码\n");
	scanf("%s",password);
	if(strcmp(q->password,password)==0)   //核对密码
	{
		{
			printf("密码正确\n");
			printf("请输入您的新密码:\n");
			scanf("%s",q->password);
			if((fp=fopen("save.txt","wb+"))==NULL)  //文件头指针
			{
				printf("cannot open file\n");
			}
			if(fwrite(q,sizeof(Account),1,fp)!=1)    //将修改的密码重新写入文件
				printf("file write error\n");
			fclose(fp);
			printf("修改密码成功\n\n\n\n\n");
		}
	}
	else
	{
		printf("您输入的密码与原密码不同\n");
		return;
		system("pause");
	}
	q->next=NULL;
}

//银行修改密码
void xgmm2(Account *head)
{
	head=NULL;          //链表头指针
	char password[20];
	FILE *fp;  //定义文件指针
	Account *p,*q=NULL;
	if((fp=fopen("save.txt","rb+"))==NULL)  //打开一个二进制文件，为读方式
	{
		printf("Unable to open file.\n");  //如不能打开，则结束程序
	}
	p=(Account*)malloc(sizeof(Account));   //申请空间
	head=p;
	while(!feof(fp))    //循环读数据直到文件尾结束
	{
		if(1!=fread(p,sizeof(Account),1,fp))
			break;    //如果没读到数据，跳出循环
		p->next=(Account *)malloc(sizeof(Account));  //为下一个结点申请空间
		q=p;   //保存当前结点的指针，作为下一个结点的前驱
		p=p->next;   //指针后移，新读入数据链到当前表尾
	}
	q->next=NULL;   //最后一个结点的后继指针为空
	fclose(fp);
	printf("Please enter your old password\n");
	scanf("%s",password);
	if(strcmp(q->password,password)==0)   //核对密码
	{
		{
			printf("Password is correct\n");
			printf("Please enter your new password:\n");
			scanf("%s",q->password);
			if((fp=fopen("save.txt","wb+"))==NULL)  //文件头指针
			{
				printf("cannot open file\n");
			}
			if(fwrite(q,sizeof(Account),1,fp)!=1)    //将修改的密码重新写入文件
				printf("file write error\n");
			fclose(fp);
			printf("Password changed successfully.\n\n\n\n\n");
		}
	}
	else
	{
		printf("The password you entered is different from the old one\n");
		return;
		system("pause");
	}
	q->next=NULL;
}

//银行存款
void cunkuan1(Account *head)
{
	int i;
	head=NULL;   //链表头指针
	FILE *fp;  //定义文件指针
	Account *p,*q=NULL;
	if((fp=fopen("save.txt","rb+"))==NULL)  //打开一个二进制文件，为读方式
	{
		printf("不能打开文件\n");  //如不能打开，则结束程序
	}
	p=(Account*)malloc(sizeof(Account));   //申请空间
	head=p;
	while(!feof(fp))    //循环读数据直到文件尾结束
	{
		if(1!=fread(p,sizeof(Account),1,fp))
			break;    //如果没读到数据，跳出循环
		p->next=(Account *)malloc(sizeof(Account));  //为下一个结点申请空间
		q=p;   //保存当前结点的指针，作为下一个结点的前驱
		p=p->next;   //指针后移，新读入数据链到当前表尾
	}
	q->next=NULL;   //最后一个结点的后继指针为空
	fclose(fp);
	system("cls");
	printf("您卡上原有余额%d元\n",q->money); 
    printf("请选择您要存入的余额\n");
	scanf("%d",&i);
	if(i<=0)
	{
		printf("对不起，您的输入有误\n\n");
		return;
	}
	else
	{
		q->money+=i;
		if((fp=fopen("save.txt","wb+"))==NULL)   //打开文件
		{
			printf("cannot open file\n");
		}
		if(fwrite(q,sizeof(Account),1,fp)!=1)  //将修改的密码重新写入文件
			printf("file write error\n");
		printf("您已经成功存取%d元\n",i);
		q->next=NULL;
		fclose(fp);
		system("pause");
		system("cls");
	}
}

//银行存款
void cunkuan2(Account *head)
{
	int i;
	head=NULL;   //链表头指针
	FILE *fp;  //定义文件指针
	Account *p,*q=NULL;
	if((fp=fopen("save.txt","rb+"))==NULL)  //打开一个二进制文件，为读方式
	{
		printf("Unable to open file.\n");  //如不能打开，则结束程序
	}
	p=(Account*)malloc(sizeof(Account));   //申请空间
	head=p;
	while(!feof(fp))    //循环读数据直到文件尾结束
	{
		if(1!=fread(p,sizeof(Account),1,fp))
			break;    //如果没读到数据，跳出循环
		p->next=(Account *)malloc(sizeof(Account));  //为下一个结点申请空间
		q=p;   //保存当前结点的指针，作为下一个结点的前驱
		p=p->next;   //指针后移，新读入数据链到当前表尾
	}
	q->next=NULL;   //最后一个结点的后继指针为空
	fclose(fp);
	system("cls");
	printf("The balance on your card %d yuan.\n",q->money); 
    printf("Please select the balance you want to deposit.\n");
	scanf("%d",&i);
	if(i<=0)
	{
		printf("Sorry, your input is wrong.\n\n");
		return;
	}
	else
	{
		q->money+=i;
		if((fp=fopen("save.txt","wb+"))==NULL)   //打开文件
		{
			printf("cannot open file\n");
		}
		if(fwrite(q,sizeof(Account),1,fp)!=1)  //将修改的密码重新写入文件
			printf("file write error\n");
		printf("You have successfully accessed it %d yuan.\n",i);
		q->next=NULL;
		fclose(fp);
		system("pause");
		system("cls");
	}
}

  
  
//退出银行函数
///
void tuichu1()
{
	printf("谢谢使用\n");
	exit(0);
}

void tuichu2()
{
	printf("Thank you for using.\n");
	exit(0);
}

//后台运行菜单函数
void menu1()
{
	printf("****************欢迎来到建设银行取款机系统****************\n\n\n\n");
    printf("**************************************************\n");
    printf("**** 1 建立信息并显示  ******  2 卡号查询信息   ****\n");
    printf("**************************************************\n");
    printf("**** 3 余额查询信息    ******  4 删除某卡号信息 ****\n");
    printf("**************************************************\n");
    printf("**** 5 增加新的用户    ******  6 按余额降序输出 ****\n");
    printf("**************************************************\n");
    printf("**** 7 输出            ******  0 退出           ****\n");
    printf("**************************************************\n");
    printf("****              谢谢光临                      ****\n");
    printf("**************************************************\n");
    printf("请选择您需要的业务\n\n");
}

//后台运行菜单函数
void menu2()
{
	printf("****************Welcome to the bank ATM system****************\n\n\n\n");
    printf("***************************************************************************************************\n");
    printf("**** 1 Create information and display it  ******  2 Card number Query information              ****\n");
    printf("***************************************************************************************************\n");
    printf("**** 3 Balance query information          ******  4 Example Delete a card number               ****\n");
    printf("***************************************************************************************************\n");
    printf("**** 5 Add new users                      ******  6 Output in descending order of balance      ****\n");
    printf("***************************************************************************************************\n");
    printf("**** 7 The output                         ******  0 exit                                       ****\n");
    printf("***************************************************************************************************\n");
    printf("****                                    Thank you for coming                                   ****\n");
    printf("***************************************************************************************************\n");
    printf("Please select the service you need\n\n");
}



//后台运行创建链表函数

void chuangjian1(person **Phead)  //*(*Phead)为指向结构体指针的地址
{
	person *p,*t;    //定义操作指针
	char n[20];
	char a[20];
	int s;
	if(*Phead) *Phead=NULL;
	printf("请输入卡号 姓名 余额 （若要结束请输入三个为零）\n");
	printf("请输入卡号\n");
	scanf("%s",n);
	printf("请输入姓名\n");
	scanf("%s",a);
	printf("请输入预存金额\n");
	scanf("%d",&s);
	if(s==0) return;
	p=(L *)malloc(sizeof(L));     //将信息输入链表中
	strcpy(p->kehu.ID,n);
	strcpy(p->kehu.name,a);
	*Phead=p;    //将指针重新指向头指针
	printf("请输入卡号\n");
	scanf("%s",n);
	printf("请输入姓名\n");
	scanf("%s",a);
	printf("请输入预存金额\n");
	scanf("%d",&s);
	while(s)
	{
		t=p;      //将p的值赋给t,p又可以储存下一个结点
		p=(L *)malloc(sizeof(L));   //为新结点开辟新的内存
        strcpy(p->kehu.ID,n);
		strcpy(p->kehu.name,a);
		p->kehu.money=s;
		p->next=NULL;
		t->next=p;   //将p的值接在t(即上一个结点的后面)
		printf("请输入卡号\n");  //尾插法
		scanf("%s",n);
		printf("请输入姓名\n");
		scanf("%s",a);
		printf("请输入预存金额\n");
		scanf("%d",&s);
	}
}

//后台运行创建链表函数

void chuangjian2(person **Phead)  //*(*Phead)为指向结构体指针的地址
{
	person *p,*t;    //定义操作指针
	char n[20];
	char a[20];
	int s;
	if(*Phead) *Phead=NULL;
	printf("Please enter the card number, name and balance (to end please enter three zeros)\n");
	printf("Please enter the card number\n");
	scanf("%s",n);
	printf("Please enter your name\n");
	scanf("%s",a);
	printf("Please enter the deposit amount\n");
	scanf("%d",&s);
	if(s==0) return;
	p=(L *)malloc(sizeof(L));     //将信息输入链表中
	strcpy(p->kehu.ID,n);
	strcpy(p->kehu.name,a);
	*Phead=p;    //将指针重新指向头指针
	printf("Please enter the card number\n");
	scanf("%s",n);
	printf("Please enter your name\n");
	scanf("%s",a);
	printf("Please enter the deposit amount\n");
	scanf("%d",&s);
	while(s)
	{
		t=p;      //将p的值赋给t,p又可以储存下一个结点
		p=(L *)malloc(sizeof(L));   //为新结点开辟新的内存
        strcpy(p->kehu.ID,n);
		strcpy(p->kehu.name,a);
		p->kehu.money=s;
		p->next=NULL;
		t->next=p;   //将p的值接在t(即上一个结点的后面)
		printf("Please enter the card number\n");  //尾插法
		scanf("%s",n);
		printf("Please enter your name\n");
		scanf("%s",a);
		printf("Please enter the deposit amount\n");
		scanf("%d",&s);
	}
}



//后台运行输出链表函数
void shuchu1(person *Phead)
{
	printf("\n\n");
	if(NULL==Phead)
	{
		printf("没有客户信息可输出！\n");  //若头指针指向空，则没有客户信息
		return;
	}
	while(Phead)  //遍历输出链表中所有客户信息
	{
		printf("卡号:%s\n姓名:\n余额:%d\n",Phead->kehu.ID,Phead->kehu.name,Phead->kehu.money);
		Phead=Phead->next;
	}
	printf("\n\n");
}

//后台运行输出链表函数
void shuchu2(person *Phead)
{
	printf("\n\n");
	if(NULL==Phead)
	{
		printf("No customer information to output!\n");  //若头指针指向空，则没有客户信息
		return;
	}
	while(Phead)  //遍历输出链表中所有客户信息
	{
		printf("ID:%s\nName:\nMoney:%d\n",Phead->kehu.ID,Phead->kehu.name,Phead->kehu.money);
		Phead=Phead->next;
	}
	printf("\n\n");
}
  
  
 //后台运行卡号查询函数
void chaxun11(person*Phead)
{
	char m[20];   //定义输入查找客户卡号的变量
    if(NULL==Phead)   //若头指针向空，则没有客户信息
	{
		printf("没有客户信息可查询！\n");
        return;
	}
    printf("请输入要查询的客户卡号：\n");  
    scanf("%s",m);
    while(NULL!=Phead&&strcmp(Phead->kehu.ID,m)!=0)  //在链表中遍历寻找中，直到链表存在并且卡号核对无误
		Phead=Phead->next;
    if(Phead==NULL)  //若指针指最后指向空，则没有客户信息
		printf("对不起，没有该用户！\n");
    else
		printf("卡号:%s\n姓名:\n余额:%d\n",Phead->kehu.ID,Phead->kehu.name,Phead->kehu.money);
}    //若找到，则输出客户信息

 //后台运行卡号查询函数
void chaxun12(person*Phead)
{
	char m[20];   //定义输入查找客户卡号的变量
    if(NULL==Phead)   //若头指针向空，则没有客户信息
	{
		printf("No customer information to query!\n");
        return;
	}
    printf("Please enter the customer card number to inquire:\n");  
    scanf("%s",m);
    while(NULL!=Phead&&strcmp(Phead->kehu.ID,m)!=0)  //在链表中遍历寻找中，直到链表存在并且卡号核对无误
		Phead=Phead->next;
    if(Phead==NULL)  //若指针指最后指向空，则没有客户信息
		printf("Sorry, there is no such user!\n");
    else
		printf("ID:%s\nName:\nMoney:%d\n",Phead->kehu.ID,Phead->kehu.name,Phead->kehu.money);
}    //若找到，则输出客户信息
  
  
  
//后台运行姓名查询函数  
void chaxun21(person *Phead)
{
	char m[20];   //定义输入查找客户卡号的变量
    if(NULL==Phead)   //若头指针向空，则没有客户信息
	{
		printf("没有客户信息可查询！\n");
		return;
	}
    printf("请输入要查询的客户姓名：\n");  
    scanf("%s",m);
    while(NULL!=Phead&&strcmp(Phead->kehu.name,m)!=0)  //在链表中遍历寻找中，直到链表存在并且姓名核对无误
    Phead=Phead->next;
    if(Phead==NULL)  //若指针指最后指向空，则没有客户信息
    printf("对不起，没有该用户！\n");
    else
    printf("卡号:%s\n姓名:\n余额:%d\n",Phead->kehu.ID,Phead->kehu.name,Phead->kehu.money);
}    //若找到，则输出客户信息

//后台运行姓名查询函数  
void chaxun22(person *Phead)
{
	char m[20];   //定义输入查找客户卡号的变量
    if(NULL==Phead)   //若头指针向空，则没有客户信息
	{
		printf("No customer information to query!\n");
		return;
	}
    printf("Please enter the name of the customer you want to query:\n");  
    scanf("%s",m);
    while(NULL!=Phead&&strcmp(Phead->kehu.name,m)!=0)  //在链表中遍历寻找中，直到链表存在并且姓名核对无误
    Phead=Phead->next;
    if(Phead==NULL)  //若指针指最后指向空，则没有客户信息
    printf("Sorry, there is no such user!\n");
    else
    printf("ID:%s\nName:\nMoney:%d\n",Phead->kehu.ID,Phead->kehu.name,Phead->kehu.money);
}    //若找到，则输出客户信息
  
  
//后台运行余额查询函数
  
void chaxun31(person *Phead)
{
	long x;   //定义输入查找客户余额的变量
    if(NULL==Phead)   //若头指针向空，则没有客户信息
	{
		printf("没有客户信息可查询！\n");
        return;
	}
    printf("请输入要查询的客户信息的余额：\n");  
    scanf("%ld",&x);
    while(NULL!=Phead&&Phead->kehu.money!=x)  //在链表中遍历寻找中，直到链表存在并且余额核对无误，继续寻找
		Phead=Phead->next;
	if(Phead==NULL)  //若指针指最后指向空，则没有客户信息
		printf("对不起，没有该用户！\n");
	else
    printf("该客户的信息为\n");
    printf("卡号:%s\n姓名:\n余额:%d\n",Phead->kehu.ID,Phead->kehu.name,Phead->kehu.money);
}    //若找到，则输出客户信息
//后台运行余额查询函数
  
void chaxun32(person *Phead)
{
	long x;   //定义输入查找客户余额的变量
    if(NULL==Phead)   //若头指针向空，则没有客户信息
	{
		printf("No customer information to query!\n");
        return;
	}
    printf("Please enter the balance of the customer information to be queried:\n");  
    scanf("%ld",&x);
    while(NULL!=Phead&&Phead->kehu.money!=x)  //在链表中遍历寻找中，直到链表存在并且余额核对无误，继续寻找
		Phead=Phead->next;
	if(Phead==NULL)  //若指针指最后指向空，则没有客户信息
		printf("Sorry, there is no such user!\n");
	else
    printf("The customer's information is.\n");
    printf("ID:%s\nName:\nMoney:%d\n",Phead->kehu.ID,Phead->kehu.name,Phead->kehu.money);
}    //若找到，则输出客户信息
  
  
//后台运行删除客户信息函数
void shanchu1(person **Phead)   //*(*Phead)为指向结构体指针的地址
{
	char k[20];    //定义输入查找客户姓名卡号的变量
    person *p=*Phead,*t;
    if(NULL==(*Phead))     //若指针最后指向空，则没有客户信息
	{
		printf("没有客户信息可删除！\n");
        return;
	}
    printf("请输入要删除的客户卡号：\n");
    scanf("%s",k);
    if(p->kehu.ID==k)  //若第一个客户就是，则让头指针指向下一个结点
		*Phead=(*Phead)->next,free(p);
    else
	{
		while(NULL==p->next&&p->next->kehu.ID!=k)   //遍历寻找，核对客户卡号
			p=p->next;   //当p->next没指向空，并且客户的卡号还没找到，则继续寻找
		if(p->next==NULL)
			printf("对不起，没有该客户！\n");
		else
		{
			t=p->next;  //如果找到，则把p->next的值赋给t
            p->next=p->next->next;
		}
	}
}

//后台运行删除客户信息函数
void shanchu2(person **Phead)   //*(*Phead)为指向结构体指针的地址
{
	char k[20];    //定义输入查找客户姓名卡号的变量
    person *p=*Phead,*t;
    if(NULL==(*Phead))     //若指针最后指向空，则没有客户信息
	{
		printf("No customer information to delete!\n");
        return;
	}
    printf("Please enter the customer card number to delete:\n");
    scanf("%s",k);
    if(p->kehu.ID==k)  //若第一个客户就是，则让头指针指向下一个结点
		*Phead=(*Phead)->next,free(p);
    else
	{
		while(NULL==p->next&&p->next->kehu.ID!=k)   //遍历寻找，核对客户卡号
			p=p->next;   //当p->next没指向空，并且客户的卡号还没找到，则继续寻找
		if(p->next==NULL)
			printf("Sorry, there is no such customer!\n");
		else
		{
			t=p->next;  //如果找到，则把p->next的值赋给t
            p->next=p->next->next;
		}
	}
}
  
void zengjia1(person **Phead)     //后台运行增加用户信息函数 *(*Phead) 为指向结构体指针的地址
{
	char n[20];   //定义输入增加客户卡号的变量
    char a[20];   //定义输入增加客户姓名的变量
    int s;
    L *p,*t,*k;   //定义操作指针变量
    printf("请输入要插入的客户信息\n");
    printf("请输入卡号\n");  //尾插法
    scanf("%s",&n);
    printf("请输入姓名\n");
    scanf("%s",a);
    printf("请输入预存金额\n");
    scanf("%d",&s);
    p=(L *)malloc(sizeof(L));    //开辟空间
    strcpy(p->kehu.ID,a);   //将新的客户信息写入链表
    p->kehu.money=s;
    strcpy(p->kehu.name,n);
    if(NULL==(*Phead))   //如果是空链表，则把新客户信息作为第一个结点
	{
		*Phead=p;   
		(*Phead)->next=NULL;
        return ;
	}
    else
	{
		p->next=(*Phead);  
		(*Phead)=p;
	}
}

void zengjia2(person **Phead)     //后台运行增加用户信息函数 *(*Phead) 为指向结构体指针的地址
{
	char n[20];   //定义输入增加客户卡号的变量
    char a[20];   //定义输入增加客户姓名的变量
    int s;
    L *p,*t,*k;   //定义操作指针变量
    printf("Please enter the customer information to insert.\n");
    printf("Please enter the card number.\n");  //尾插法
    scanf("%s",&n);
    printf("Please enter your name.\n");
    scanf("%s",a);
    printf("Please enter the deposit amount.\n");
    scanf("%d",&s);
    p=(L *)malloc(sizeof(L));    //开辟空间
    strcpy(p->kehu.ID,a);   //将新的客户信息写入链表
    p->kehu.money=s;
    strcpy(p->kehu.name,n);
    if(NULL==(*Phead))   //如果是空链表，则把新客户信息作为第一个结点
	{
		*Phead=p;   
		(*Phead)->next=NULL;
        return ;
	}
    else
	{
		p->next=(*Phead);  
		(*Phead)=p;
	}
}
